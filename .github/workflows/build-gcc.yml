name: Build GCC from Source

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'GCC Version to build'
        required: true
        default: '15'
        type: choice
        options:
          - '15'
          - '14'
          - '13'
          - '12'
      branch:
        description: 'Branch to checkout for workflow'
        required: false
        default: 'main'
        type: string

env:
  # Version mappings - will be used to get exact versions
  GCC_15_VERSION: '15.1.0'
  GCC_14_VERSION: '14.3.0'
  GCC_13_VERSION: '13.3.0'
  GCC_12_VERSION: '12.4.0'

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      exact_version: ${{ steps.set-version.outputs.exact_version }}
      major_version: ${{ steps.set-version.outputs.major_version }}
    steps:
      - name: Set exact version
        id: set-version
        run: |
          case "${{ github.event.inputs.version }}" in
            "15")
              echo "exact_version=${{ env.GCC_15_VERSION }}" >> $GITHUB_OUTPUT
              echo "major_version=15" >> $GITHUB_OUTPUT
              ;;
            "14")
              echo "exact_version=${{ env.GCC_14_VERSION }}" >> $GITHUB_OUTPUT
              echo "major_version=14" >> $GITHUB_OUTPUT
              ;;
            "13")
              echo "exact_version=${{ env.GCC_13_VERSION }}" >> $GITHUB_OUTPUT
              echo "major_version=13" >> $GITHUB_OUTPUT
              ;;
            "12")
              echo "exact_version=${{ env.GCC_12_VERSION }}" >> $GITHUB_OUTPUT
              echo "major_version=12" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unsupported version: ${{ github.event.inputs.version }}"
              exit 1
              ;;
          esac

  build-gcc:
    needs: get-version
    timeout-minutes: 120
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-22.04
          - arch: aarch64
            runner: ubuntu-22.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libgmp-dev \
            libmpfr-dev \
            libmpc-dev \
            libisl-dev \
            zlib1g-dev \
            wget \
            tar \
            xz-utils \
            flex \
            bison \
            texinfo
          
          # Verify static zlib library is available
          ls -la /usr/lib/*/libz.a || echo "Static zlib not found in expected location"
          find /usr -name "libz.a" 2>/dev/null || echo "Static zlib library not found"

      # No cross-compilation tools needed - using native ARM64 runner for aarch64

      - name: Download GCC source
        run: |
          # Try multiple mirrors for reliability
          wget -q https://mirror.csclub.uwaterloo.ca/gnu/gcc/gcc-${{ needs.get-version.outputs.exact_version }}/gcc-${{ needs.get-version.outputs.exact_version }}.tar.xz || \
          wget -q https://mirrors.kernel.org/gnu/gcc/gcc-${{ needs.get-version.outputs.exact_version }}/gcc-${{ needs.get-version.outputs.exact_version }}.tar.xz || \
          wget -q https://ftp.gnu.org/gnu/gcc/gcc-${{ needs.get-version.outputs.exact_version }}/gcc-${{ needs.get-version.outputs.exact_version }}.tar.xz
          tar -xf gcc-${{ needs.get-version.outputs.exact_version }}.tar.xz

      - name: Download prerequisites
        run: |
          cd gcc-${{ needs.get-version.outputs.exact_version }}
          ./contrib/download_prerequisites

      - name: Configure build
        run: |
          mkdir -p build-gcc-${{ matrix.arch }}
          cd build-gcc-${{ matrix.arch }}
          
          # Native build configuration for both architectures
          # Use optimized flags without debug info to reduce binary size
          # Build static binaries to eliminate glibc runtime dependencies
          # Force static linking of zlib by providing explicit library path
          CFLAGS="-O2" CXXFLAGS="-O2" \
          LDFLAGS="-static" \
          LIBS="-lz" \
          ../gcc-${{ needs.get-version.outputs.exact_version }}/configure \
            --prefix=/opt/gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }} \
            --enable-languages=c,c++,fortran \
            --disable-multilib \
            --enable-threads=posix \
            --disable-shared \
            --enable-static \
            --with-system-zlib \
            --disable-bootstrap

      - name: Build GCC
        run: |
          cd build-gcc-${{ matrix.arch }}
          make -j$(nproc)

      - name: Install GCC
        run: |
          cd build-gcc-${{ matrix.arch }}
          sudo make install-strip DESTDIR=$PWD/install-root

      - name: Create glibc sysroot package
        run: |
          echo "=== Creating glibc sysroot package ==="
          
          # Create sysroot directory structure
          SYSROOT_DIR="glibc-sysroot-${{ matrix.arch }}"
          mkdir -p "$SYSROOT_DIR"/{lib,lib64,usr/{lib,include}}
          
          # Get the system's multiarch directory
          MULTIARCH_DIR=$(gcc -print-multiarch 2>/dev/null || echo "$(uname -m)-linux-gnu")
          SYSTEM_LIB_DIR="/usr/lib/$MULTIARCH_DIR"
          
          echo "Building glibc sysroot for ${{ matrix.arch }}"
          echo "System multiarch directory: $MULTIARCH_DIR"
          echo "System lib directory: $SYSTEM_LIB_DIR"
          
          # Copy C runtime startup files (crt*.o)
          echo "Copying C runtime startup files..."
          if [ -d "$SYSTEM_LIB_DIR" ]; then
            find "$SYSTEM_LIB_DIR" -name "crt*.o" -exec cp {} "$SYSROOT_DIR/lib/" \; 2>/dev/null || true
            find /usr/lib -name "crt*.o" -exec cp {} "$SYSROOT_DIR/lib/" \; 2>/dev/null || true
          fi
          
          # Copy essential glibc libraries (both static and dynamic)
          echo "Copying glibc libraries..."
          for lib in libc.so.6 libm.so.6 libpthread.so.0 libdl.so.2 libresolv.so.2 librt.so.1 libutil.so.1; do
            find /lib /usr/lib -name "$lib" -exec cp {} "$SYSROOT_DIR/lib/" \; 2>/dev/null || true
          done
          
          # Copy static libraries if available
          for lib in libc.a libm.a libpthread.a libdl.a libresolv.a librt.a libutil.a; do
            find /usr/lib -name "$lib" -exec cp {} "$SYSROOT_DIR/lib/" \; 2>/dev/null || true
          done
          
          # Copy dynamic linker
          find /lib /lib64 -name "ld-linux*.so*" -exec cp {} "$SYSROOT_DIR/lib/" \; 2>/dev/null || true
          find /lib /lib64 -name "ld.so.1" -exec cp {} "$SYSROOT_DIR/lib/" \; 2>/dev/null || true
          
          # Copy system headers
          echo "Copying system headers..."
          if [ -d "/usr/include" ]; then
            cp -r /usr/include/* "$SYSROOT_DIR/usr/include/" 2>/dev/null || true
          fi
          
          # Copy architecture-specific headers
          if [ -d "/usr/include/$MULTIARCH_DIR" ]; then
            echo "Copying architecture-specific headers from /usr/include/$MULTIARCH_DIR"
            # Merge architecture-specific headers into main include directory
            cp -r /usr/include/$MULTIARCH_DIR/* "$SYSROOT_DIR/usr/include/" 2>/dev/null || true
            # Also keep the multiarch directory structure for compatibility
            cp -r /usr/include/$MULTIARCH_DIR "$SYSROOT_DIR/usr/include/" 2>/dev/null || true
          fi
          
          # Create lib64 symlink for x86_64
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            ln -sf lib "$SYSROOT_DIR/lib64"
          fi
          
          # Create usage documentation
          cat > "$SYSROOT_DIR/README.md" << 'EOF'
          # glibc Sysroot Package
          
          This package contains glibc headers and libraries for use with GCC.
          
          ## Contents
          - `lib/`: C runtime objects (crt*.o), glibc libraries (static and dynamic)
          - `usr/include/`: System headers including architecture-specific headers
          - `usr/lib/`: Additional system libraries
          
          ## Usage with GCC
          
          ### Method 1: Use --sysroot flag
          ```bash
          gcc --sysroot=/path/to/glibc-sysroot-<arch> -o hello hello.c
          ```
          
          ### Method 2: Set environment variables
          ```bash
          export CPATH=/path/to/glibc-sysroot-<arch>/usr/include
          export LIBRARY_PATH=/path/to/glibc-sysroot-<arch>/lib
          gcc -o hello hello.c
          ```
          
          ### Method 3: Copy to system locations (if you have permissions)
          ```bash
          sudo cp -r lib/* /usr/local/lib/
          sudo cp -r usr/include/* /usr/local/include/
          gcc -o hello hello.c
          ```
          
          ## Static vs Dynamic Linking
          - For portable binaries: `gcc -static --sysroot=... -o hello hello.c`
          - For system binaries: `gcc --sysroot=... -o hello hello.c`
          
          This sysroot is compatible with the GCC build from the same architecture.
          EOF
          
          # Verify sysroot contents
          echo "=== Sysroot Contents ==="
          echo "Runtime objects:"
          ls -la "$SYSROOT_DIR/lib/" | grep "crt" || echo "No CRT files found"
          echo "Libraries (first 10):"
          ls -la "$SYSROOT_DIR/lib/" | head -10
          echo "Headers (first 10):"
          ls -la "$SYSROOT_DIR/usr/include/" | head -10
          
          # Check for critical headers
          echo "=== Critical Headers Check ==="
          for header in "stdio.h" "stdlib.h" "bits/libc-header-start.h" "bits/wordsize.h" "gnu/stubs.h"; do
            if [ -f "$SYSROOT_DIR/usr/include/$header" ]; then
              echo "✅ Found $header"
            else
              echo "❌ Missing $header"
            fi
          done
          
          # Create sysroot archive
          tar -czf "glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}.tar.gz" "$SYSROOT_DIR"
          echo "✅ Created glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}.tar.gz"

      - name: Verify static linking
        run: |
          cd build-gcc-${{ matrix.arch }}/install-root/opt/gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}/bin
          echo "Checking static linking of key GCC tools..."
          
          # Check if binaries are statically linked (should show 'statically linked')
          for tool in gcc g++ gfortran; do
            if [ -f "$tool" ]; then
              echo "=== $tool ==="
              file "$tool"
              echo "Dynamic dependencies:"
              ldd "$tool" 2>/dev/null || echo "  (statically linked)"
              echo
            fi
          done

      - name: Build summary
        run: |
          echo "=== GCC Build Complete ==="
          if [ "${{ github.event.inputs.branch }}" != "main" ] && [ "${{ github.event.inputs.branch }}" != "" ]; then
            echo "ℹ️  Note: Built from branch '${{ github.event.inputs.branch }}' - no release will be created"
            echo "   Artifacts are available for download from this workflow run"
          else
            echo "✅ Built from main branch - release will be created with artifacts"
          fi

      - name: Create archive
        run: |
          cd build-gcc-${{ matrix.arch }}/install-root/opt
          tar -czf $GITHUB_WORKSPACE/gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}.tar.gz gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}

      - name: Upload GCC artifact
        uses: actions/upload-artifact@v4
        with:
          name: gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}
          path: gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}.tar.gz

      - name: Upload sysroot artifact
        uses: actions/upload-artifact@v4
        with:
          name: glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}
          path: glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}.tar.gz

  create-release:
    needs: [get-version, build-gcc]
    runs-on: ubuntu-latest
    if: github.event.inputs.branch == 'main' || github.event.inputs.branch == ''
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: |
          find artifacts -type f -name "*.tar.gz" | sort

      - name: Delete existing release if it exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if release exists and delete it
          if gh release view ${{ needs.get-version.outputs.exact_version }} >/dev/null 2>&1; then
            echo "Release ${{ needs.get-version.outputs.exact_version }} exists, deleting..."
            gh release delete ${{ needs.get-version.outputs.exact_version }} --yes
          else
            echo "Release ${{ needs.get-version.outputs.exact_version }} does not exist"
          fi

      - name: Create new release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the release
          gh release create ${{ needs.get-version.outputs.exact_version }} \
            --title "GCC ${{ needs.get-version.outputs.exact_version }}" \
            --notes "GCC ${{ needs.get-version.outputs.exact_version }} builds for x86_64 and aarch64 architectures.

          Built from source with the following configuration:
          - Languages: C, C++, Fortran (bootstrap version)
          - Architectures: x86_64 (native), aarch64 (native ARM64)
          - Features: Static libraries, POSIX threads
          - Type: Static bootstrap build suitable for compiling more advanced GCC versions
          - Build method: Native compilation on respective architectures
          - Optimization: Stripped static binaries for reduced download size
          - Compatibility: Statically linked - no glibc runtime dependencies
          
          ## Files
          
          ### GCC Compiler
          - \`gcc-${{ needs.get-version.outputs.exact_version }}-x86_64.tar.gz\`: GCC build for x86_64 architecture
          - \`gcc-${{ needs.get-version.outputs.exact_version }}-aarch64.tar.gz\`: GCC build for aarch64 architecture
          
          ### glibc Sysroot (Runtime Libraries)
          - \`glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-x86_64.tar.gz\`: glibc headers and libraries for x86_64
          - \`glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-aarch64.tar.gz\`: glibc headers and libraries for aarch64
          
          ## Installation & Usage
          
          ### Option 1: GCC Only (requires system glibc)
          \`\`\`bash
          tar -xzf gcc-${{ needs.get-version.outputs.exact_version }}-<arch>.tar.gz
          export PATH=\$PWD/gcc-${{ needs.get-version.outputs.exact_version }}-<arch>/bin:\$PATH
          gcc -o hello hello.c  # Works if system has compatible glibc
          \`\`\`
          
          ### Option 2: GCC + Sysroot (self-contained, recommended)
          \`\`\`bash
          # Extract both packages
          tar -xzf gcc-${{ needs.get-version.outputs.exact_version }}-<arch>.tar.gz
          tar -xzf glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-<arch>.tar.gz
          
          # Set up environment
          export PATH=\$PWD/gcc-${{ needs.get-version.outputs.exact_version }}-<arch>/bin:\$PATH
          export SYSROOT=\$PWD/glibc-sysroot-<arch>
          
          # Compile with sysroot
          gcc --sysroot=\$SYSROOT -o hello hello.c
          gcc --sysroot=\$SYSROOT -static -o hello_static hello.c  # Fully portable binary
          \`\`\`
          
          ### Option 3: Environment Variables
          \`\`\`bash
          export CPATH=\$PWD/glibc-sysroot-<arch>/usr/include
          export LIBRARY_PATH=\$PWD/glibc-sysroot-<arch>/lib
          gcc -o hello hello.c  # No --sysroot needed
          \`\`\`
          
          ## Using as Bootstrap Compiler
          This minimal build can be used to compile a more feature-rich GCC version with additional options like:
          - Go and JIT language support
          - Plugin support (\`--enable-plugin\`, \`--enable-host-shared\`)
          - Link-time optimization (\`--enable-lto\`)
          - Security hardening (\`--enable-default-pie\`, \`--enable-default-ssp\`)
          - Performance optimizations and debugging features" \
            artifacts/gcc-${{ needs.get-version.outputs.exact_version }}-x86_64/gcc-${{ needs.get-version.outputs.exact_version }}-x86_64.tar.gz \
            artifacts/gcc-${{ needs.get-version.outputs.exact_version }}-aarch64/gcc-${{ needs.get-version.outputs.exact_version }}-aarch64.tar.gz \
            artifacts/glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-x86_64/glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-x86_64.tar.gz \
            artifacts/glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-aarch64/glibc-sysroot-${{ needs.get-version.outputs.exact_version }}-aarch64.tar.gz
            artifacts/gcc-${{ needs.get-version.outputs.exact_version }}-aarch64/gcc-${{ needs.get-version.outputs.exact_version }}-aarch64.tar.gz