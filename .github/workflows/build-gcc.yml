name: Build GCC from Source

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'GCC Version to build'
        required: true
        default: '15'
        type: choice
        options:
          - '15'
          - '14'
          - '13'
          - '12'

env:
  # Version mappings - will be used to get exact versions
  GCC_15_VERSION: '15.1.0'
  GCC_14_VERSION: '14.3.0'
  GCC_13_VERSION: '13.3.0'
  GCC_12_VERSION: '12.4.0'

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      exact_version: ${{ steps.set-version.outputs.exact_version }}
      major_version: ${{ steps.set-version.outputs.major_version }}
    steps:
      - name: Set exact version
        id: set-version
        run: |
          case "${{ github.event.inputs.version }}" in
            "15")
              echo "exact_version=${{ env.GCC_15_VERSION }}" >> $GITHUB_OUTPUT
              echo "major_version=15" >> $GITHUB_OUTPUT
              ;;
            "14")
              echo "exact_version=${{ env.GCC_14_VERSION }}" >> $GITHUB_OUTPUT
              echo "major_version=14" >> $GITHUB_OUTPUT
              ;;
            "13")
              echo "exact_version=${{ env.GCC_13_VERSION }}" >> $GITHUB_OUTPUT
              echo "major_version=13" >> $GITHUB_OUTPUT
              ;;
            "12")
              echo "exact_version=${{ env.GCC_12_VERSION }}" >> $GITHUB_OUTPUT
              echo "major_version=12" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unsupported version: ${{ github.event.inputs.version }}"
              exit 1
              ;;
          esac

  build-gcc:
    needs: get-version
    timeout-minutes: 120
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-22.04
          - arch: aarch64
            runner: ubuntu-22.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libgmp-dev \
            libmpfr-dev \
            libmpc-dev \
            libisl-dev \
            zlib1g-dev \
            wget \
            tar \
            xz-utils \
            flex \
            bison \
            texinfo \
            glibc-source \
            linux-libc-dev
          
          # Verify static libraries are available
          ls -la /usr/lib/*/libz.a || echo "Static zlib not found in expected location"
          find /usr -name "libz.a" 2>/dev/null || echo "Static zlib library not found"
          
          # Install glibc static libraries for linking
          sudo apt-get install -y glibc-static || echo "glibc-static not available, will build minimal libc"

      # No cross-compilation tools needed - using native ARM64 runner for aarch64

      - name: Download GCC source
        run: |
          # Try multiple mirrors for reliability
          wget -q https://mirror.csclub.uwaterloo.ca/gnu/gcc/gcc-${{ needs.get-version.outputs.exact_version }}/gcc-${{ needs.get-version.outputs.exact_version }}.tar.xz || \
          wget -q https://mirrors.kernel.org/gnu/gcc/gcc-${{ needs.get-version.outputs.exact_version }}/gcc-${{ needs.get-version.outputs.exact_version }}.tar.xz || \
          wget -q https://ftp.gnu.org/gnu/gcc/gcc-${{ needs.get-version.outputs.exact_version }}/gcc-${{ needs.get-version.outputs.exact_version }}.tar.xz
          tar -xf gcc-${{ needs.get-version.outputs.exact_version }}.tar.xz

      - name: Download prerequisites
        run: |
          cd gcc-${{ needs.get-version.outputs.exact_version }}
          ./contrib/download_prerequisites

      - name: Configure build
        run: |
          mkdir -p build-gcc-${{ matrix.arch }}
          cd build-gcc-${{ matrix.arch }}
          
          # Create a sysroot with necessary runtime libraries
          SYSROOT="/opt/gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}/sysroot"
          mkdir -p "$SYSROOT"/{lib,usr/lib,usr/include}
          
          # Copy essential runtime files to sysroot
          # Find the system's multiarch directory
          MULTIARCH_DIR=$(gcc -print-multiarch 2>/dev/null || echo "$(uname -m)-linux-gnu")
          SYSTEM_LIB_DIR="/usr/lib/$MULTIARCH_DIR"
          
          echo "System multiarch directory: $MULTIARCH_DIR"
          echo "System lib directory: $SYSTEM_LIB_DIR"
          
          # Copy C runtime startup files
          if [ -f "$SYSTEM_LIB_DIR/crt1.o" ]; then
            cp "$SYSTEM_LIB_DIR"/crt*.o "$SYSROOT/lib/" || echo "Warning: Could not copy some crt files"
          fi
          
          # Copy static C library if available
          if [ -f "$SYSTEM_LIB_DIR/libc.a" ]; then
            cp "$SYSTEM_LIB_DIR/libc.a" "$SYSROOT/lib/"
          elif [ -f "/usr/lib/libc.a" ]; then
            cp "/usr/lib/libc.a" "$SYSROOT/lib/"
          else
            echo "Warning: Static libc.a not found, will rely on dynamic linking"
          fi
          
          # Copy essential system headers
          if [ -d "/usr/include" ]; then
            cp -r /usr/include/* "$SYSROOT/usr/include/" 2>/dev/null || echo "Warning: Could not copy all system headers"
          fi
          
          # Native build configuration for both architectures
          # Use optimized flags without debug info to reduce binary size
          # Build static binaries to eliminate glibc runtime dependencies
          # Include sysroot for runtime libraries
          CFLAGS="-O2" CXXFLAGS="-O2" \
          LDFLAGS="-static" \
          LIBS="-lz" \
          ../gcc-${{ needs.get-version.outputs.exact_version }}/configure \
            --prefix=/opt/gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }} \
            --with-sysroot="$SYSROOT" \
            --with-native-system-header-dir=/usr/include \
            --enable-languages=c,c++,fortran \
            --disable-multilib \
            --enable-threads=posix \
            --disable-shared \
            --enable-static \
            --with-system-zlib \
            --disable-bootstrap \
            --enable-__cxa_atexit \
            --enable-gnu-unique-object

      - name: Build GCC
        run: |
          cd build-gcc-${{ matrix.arch }}
          make -j$(nproc)

      - name: Install GCC
        run: |
          cd build-gcc-${{ matrix.arch }}
          sudo make install-strip DESTDIR=$PWD/install-root

      - name: Verify static linking
        run: |
          cd build-gcc-${{ matrix.arch }}/install-root/opt/gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}/bin
          echo "Checking static linking of key GCC tools..."
          
          # Check if binaries are statically linked (should show 'statically linked')
          for tool in gcc g++ gfortran; do
            if [ -f "$tool" ]; then
              echo "=== $tool ==="
              file "$tool"
              echo "Dynamic dependencies:"
              ldd "$tool" 2>/dev/null || echo "  (statically linked)"
              echo
            fi
          done

      - name: Test GCC compilation and linking
        run: |
          cd build-gcc-${{ matrix.arch }}/install-root/opt/gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}
          
          # Set up environment for testing
          export PATH="$PWD/bin:$PATH"
          export GCC_EXEC_PREFIX="$PWD/lib/gcc/"
          
          # Create a simple test program
          cat > test_program.c << 'EOF'
          #include <stdio.h>
          #include <stdlib.h>
          
          int main() {
              printf("Hello from statically linked GCC!\n");
              printf("malloc test: %p\n", malloc(100));
              return 0;
          }
          EOF
          
          echo "=== Testing C compilation and linking ==="
          echo "GCC version:"
          ./bin/gcc --version
          
          echo "GCC search paths:"
          ./bin/gcc -print-search-dirs
          
          echo "Attempting to compile test program..."
          if ./bin/gcc -v -o test_program test_program.c 2>&1; then
            echo "✅ SUCCESS: C program compiled successfully"
            echo "Running test program..."
            if ./test_program; then
              echo "✅ SUCCESS: C program executed successfully"
            else
              echo "❌ ERROR: C program failed to execute"
              exit 1
            fi
          else
            echo "❌ ERROR: C program compilation failed"
            echo "Checking for missing runtime libraries..."
            find . -name "crt*.o" -o -name "libc.*" | head -10
            exit 1
          fi
          
          # Test C++ compilation
          cat > test_program.cpp << 'EOF'
          #include <iostream>
          #include <vector>
          
          int main() {
              std::cout << "Hello from C++!" << std::endl;
              std::vector<int> v = {1, 2, 3};
              std::cout << "Vector size: " << v.size() << std::endl;
              return 0;
          }
          EOF
          
          echo "=== Testing C++ compilation and linking ==="
          if ./bin/g++ -v -o test_program_cpp test_program.cpp 2>&1; then
            echo "✅ SUCCESS: C++ program compiled successfully"
            echo "Running C++ test program..."
            if ./test_program_cpp; then
              echo "✅ SUCCESS: C++ program executed successfully"
            else
              echo "❌ ERROR: C++ program failed to execute"
              exit 1
            fi
          else
            echo "❌ ERROR: C++ program compilation failed"
            exit 1
          fi

      - name: Create archive
        run: |
          cd build-gcc-${{ matrix.arch }}/install-root/opt
          tar -czf $GITHUB_WORKSPACE/gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}.tar.gz gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}
          path: gcc-${{ needs.get-version.outputs.exact_version }}-${{ matrix.arch }}.tar.gz

  create-release:
    needs: [get-version, build-gcc]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: |
          find artifacts -type f -name "*.tar.gz" | sort

      - name: Delete existing release if it exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if release exists and delete it
          if gh release view ${{ needs.get-version.outputs.exact_version }} >/dev/null 2>&1; then
            echo "Release ${{ needs.get-version.outputs.exact_version }} exists, deleting..."
            gh release delete ${{ needs.get-version.outputs.exact_version }} --yes
          else
            echo "Release ${{ needs.get-version.outputs.exact_version }} does not exist"
          fi

      - name: Create new release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the release
          gh release create ${{ needs.get-version.outputs.exact_version }} \
            --title "GCC ${{ needs.get-version.outputs.exact_version }}" \
            --notes "GCC ${{ needs.get-version.outputs.exact_version }} builds for x86_64 and aarch64 architectures.

          Built from source with the following configuration:
          - Languages: C, C++, Fortran
          - Architectures: x86_64 (native), aarch64 (native ARM64)
          - Features: Static libraries, POSIX threads, includes C runtime libraries
          - Type: Complete GCC build with sysroot containing runtime libraries (crt*.o, libc)
          - Build method: Native compilation on respective architectures
          - Optimization: Stripped static binaries for reduced download size
          - Compatibility: Statically linked GCC with included runtime support
          - Runtime Libraries: Includes C runtime startup files and standard library for linking
          
          ## Files
          - \`gcc-${{ needs.get-version.outputs.exact_version }}-x86_64.tar.gz\`: GCC build for x86_64 architecture
          - \`gcc-${{ needs.get-version.outputs.exact_version }}-aarch64.tar.gz\`: GCC build for aarch64 architecture
          
          ## Installation
          Extract the appropriate archive and add the \`bin\` directory to your PATH:
          \`\`\`bash
          tar -xzf gcc-${{ needs.get-version.outputs.exact_version }}-<arch>.tar.gz
          export PATH=\$PWD/gcc-${{ needs.get-version.outputs.exact_version }}-<arch>/bin:\$PATH
          \`\`\`
          
          ## Key Features
          This build includes all necessary components for C/C++ development:
          - **Complete C Runtime**: Includes crt1.o, crti.o, crtn.o startup files
          - **Standard C Library**: Static libc.a for linking C programs
          - **System Headers**: Standard C library headers included
          - **Sysroot**: Self-contained environment with all runtime dependencies
          - **No External Dependencies**: Can compile and link programs without system libc
          
          ## Usage
          This GCC build can compile and link C/C++ programs out of the box without requiring additional system libraries:
          \`\`\`bash
          # Simple C program compilation
          ./gcc-<version>-<arch>/bin/gcc -o hello hello.c
          
          # C++ program compilation  
          ./gcc-<version>-<arch>/bin/g++ -o hello hello.cpp
          \`\`\`
          
          ## Using as Bootstrap Compiler
          This complete build can also be used to compile more advanced GCC versions with additional options like:
          - Go and JIT language support
          - Plugin support (\`--enable-plugin\`, \`--enable-host-shared\`)
          - Link-time optimization (\`--enable-lto\`)
          - Security hardening (\`--enable-default-pie\`, \`--enable-default-ssp\`)
          - Performance optimizations and debugging features" \
            artifacts/gcc-${{ needs.get-version.outputs.exact_version }}-x86_64/gcc-${{ needs.get-version.outputs.exact_version }}-x86_64.tar.gz \
            artifacts/gcc-${{ needs.get-version.outputs.exact_version }}-aarch64/gcc-${{ needs.get-version.outputs.exact_version }}-aarch64.tar.gz